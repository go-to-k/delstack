// Code generated by MockGen. DO NOT EDIT.
// Source: operator_manager.go

package operation

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIOperatorManager is a mock of IOperatorManager interface.
type MockIOperatorManager struct {
	ctrl     *gomock.Controller
	recorder *MockIOperatorManagerMockRecorder
}

// MockIOperatorManagerMockRecorder is the mock recorder for MockIOperatorManager.
type MockIOperatorManagerMockRecorder struct {
	mock *MockIOperatorManager
}

// NewMockIOperatorManager creates a new mock instance.
func NewMockIOperatorManager(ctrl *gomock.Controller) *MockIOperatorManager {
	mock := &MockIOperatorManager{ctrl: ctrl}
	mock.recorder = &MockIOperatorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOperatorManager) EXPECT() *MockIOperatorManagerMockRecorder {
	return m.recorder
}

// CheckResourceCounts mocks base method.
func (m *MockIOperatorManager) CheckResourceCounts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResourceCounts")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckResourceCounts indicates an expected call of CheckResourceCounts.
func (mr *MockIOperatorManagerMockRecorder) CheckResourceCounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResourceCounts", reflect.TypeOf((*MockIOperatorManager)(nil).CheckResourceCounts))
}

// DeleteResourceCollection mocks base method.
func (m *MockIOperatorManager) DeleteResourceCollection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceCollection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceCollection indicates an expected call of DeleteResourceCollection.
func (mr *MockIOperatorManagerMockRecorder) DeleteResourceCollection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceCollection", reflect.TypeOf((*MockIOperatorManager)(nil).DeleteResourceCollection), ctx)
}

// GetLogicalResourceIds mocks base method.
func (m *MockIOperatorManager) GetLogicalResourceIds() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalResourceIds")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetLogicalResourceIds indicates an expected call of GetLogicalResourceIds.
func (mr *MockIOperatorManagerMockRecorder) GetLogicalResourceIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalResourceIds", reflect.TypeOf((*MockIOperatorManager)(nil).GetLogicalResourceIds))
}

// SetOperatorCollection mocks base method.
func (m *MockIOperatorManager) SetOperatorCollection(stackName *string, stackResourceSummaries []types.StackResourceSummary) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOperatorCollection", stackName, stackResourceSummaries)
}

// SetOperatorCollection indicates an expected call of SetOperatorCollection.
func (mr *MockIOperatorManagerMockRecorder) SetOperatorCollection(stackName, stackResourceSummaries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOperatorCollection", reflect.TypeOf((*MockIOperatorManager)(nil).SetOperatorCollection), stackName, stackResourceSummaries)
}
