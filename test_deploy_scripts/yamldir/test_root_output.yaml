AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Project Name Prefix
      Parameters:
      - PJPrefix
Parameters:
  PJPrefix:
    Type: String
Resources:
  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Sub: ${PJPrefix}-ecr
      LifecyclePolicy:
        LifecyclePolicyText: "{\n  \"rules\": [\n    {\n      \"rulePriority\": 1,\n\
          \      \"description\": \"Delete more than 3 images\",\n      \"selection\"\
          : {\n        \"tagStatus\": \"any\",\n        \"countType\": \"imageCountMoreThan\"\
          ,\n        \"countNumber\": 3\n      },\n      \"action\": {\n        \"\
          type\": \"expire\"\n      }\n    }\n  ]\n}\n"
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${PJPrefix}-ECR
    Metadata:
      SamResourceId: ECR
  ChildStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: https://s3.ap-northeast-1.amazonaws.com/dev-goto2-teststack/bf072883e4352327e89d5ee6df7022ec.template
      Parameters:
        PJPrefix:
          Fn::Sub: ${PJPrefix}
    Metadata:
      SamResourceId: ChildStack
  ChildTwoStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: https://s3.ap-northeast-1.amazonaws.com/dev-goto2-teststack/11258d99bc8285582f8b4d17fc9c92f8.template
      Parameters:
        PJPrefix:
          Fn::Sub: ${PJPrefix}
    Metadata:
      SamResourceId: ChildTwoStack
  RootS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      SamResourceId: RootS3Bucket
  RootLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-1
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootLambdaRole
  RootLambdaRole2:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-2
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootLambdaRole2
  RootTwoLambdaRole3:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-3
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole3
  RootTwoLambdaRole4:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-4
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole4
  RootTwoLambdaRole5:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-5
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole5
  RootTwoLambdaRole6:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-6
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole6
  RootTwoLambdaRole7:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-7
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole7
  RootTwoLambdaRole8:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-8
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole8
  RootTwoLambdaRole9:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${PJPrefix}-root-role-9
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: RootTwoLambdaRole9
  RootLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${PJPrefix}-root-policy
      Roles:
      - Ref: RootLambdaRole
      - Ref: RootLambdaRole2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:PutResourcePolicy
          - logs:DeleteResourcePolicy
          Resource:
          - '*'
    Metadata:
      SamResourceId: RootLambdaPolicy
  RootResourcePolicyLambdaForLogs:
    Type: AWS::Lambda::Function
    DependsOn:
    - RootLambdaPolicy
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - RootLambdaRole
        - Arn
      Code:
        ZipFile: "import json\nimport cfnresponse\nimport boto3\nfrom botocore.exceptions\
          \ import ClientError\n\nclient = boto3.client(\"logs\")\n\ndef PutPolicy(arns,\
          \ policyname, service):\n  arn_str = '\",\"'.join(arns)\n  arn = \"[\\\"\
          \" + arn_str + \"\\\"]\"\n\n  response = client.put_resource_policy(\n \
          \   policyName=policyname,\n    policyDocument=\"{\\\"Version\\\":\\\"2012-10-17\\\
          \",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\
          \"Service\\\":\\\"\" + service + \"\\\"},\\\"Action\\\":[\\\"logs:CreateLogStream\\\
          \",\\\"logs:PutLogEvents\\\"],\\\"Resource\\\":\"+ arn + \"}]}\",\n  )\n\
          \  return\n\ndef DeletePolicy(policyname):\n  response = client.delete_resource_policy(\n\
          \    policyName=policyname\n  )\n  return\n\ndef handler(event, context):\n\
          \n  CloudWatchLogsLogGroupArns = event['ResourceProperties']['CloudWatchLogsLogGroupArn']\n\
          \  PolicyName = event['ResourceProperties']['PolicyName']\n  ServiceName\
          \ = event['ResourceProperties']['ServiceName']\n\n  responseData = {}\n\n\
          \  try:\n    # if event['RequestType'] == \"Delete\":\n      # DeletePolicy(PolicyName)\n\
          \    if event['RequestType'] == \"Create\":\n      PutPolicy(CloudWatchLogsLogGroupArns,\
          \ PolicyName, ServiceName)\n    responseData['Data'] = \"SUCCESS\"\n   \
          \ status=cfnresponse.SUCCESS\n  except ClientError as e:\n    responseData['Data']\
          \ = \"FAILED\"\n    status=cfnresponse.FAILED\n    print(\"Unexpected error:\
          \ %s\" % e)\n  cfnresponse.send(event, context, status, responseData, \"\
          CustomResourcePhysicalID\")\n"
      Runtime: python3.9
    Metadata:
      SamResourceId: RootResourcePolicyLambdaForLogs
  RootAddResourcePolicy:
    Type: Custom::RootAddResourcePolicy
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - RootResourcePolicyLambdaForLogs
        - Arn
      CloudWatchLogsLogGroupArn:
      - Fn::GetAtt:
        - RootLogGroup
        - Arn
      PolicyName:
        Fn::Sub: ${PJPrefix}RootResourcePolicyForDNSLog
      ServiceName: route53.amazonaws.com
    Metadata:
      SamResourceId: RootAddResourcePolicy
  RootLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: ${PJPrefix}-Root-log
      RetentionInDays: 14
    Metadata:
      SamResourceId: RootLogGroup
Outputs:
  ECRArn:
    Export:
      Name:
        Fn::Sub: ${PJPrefix}-ECR-Arn
    Description: ECR ARN
    Value:
      Fn::GetAtt:
      - ECR
      - Arn
