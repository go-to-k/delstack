// Code generated by MockGen. DO NOT EDIT.
// Source: ./ecr.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEcr is a mock of IEcr interface.
type MockIEcr struct {
	ctrl     *gomock.Controller
	recorder *MockIEcrMockRecorder
}

// MockIEcrMockRecorder is the mock recorder for MockIEcr.
type MockIEcrMockRecorder struct {
	mock *MockIEcr
}

// NewMockIEcr creates a new mock instance.
func NewMockIEcr(ctrl *gomock.Controller) *MockIEcr {
	mock := &MockIEcr{ctrl: ctrl}
	mock.recorder = &MockIEcrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEcr) EXPECT() *MockIEcrMockRecorder {
	return m.recorder
}

// CheckEcrExists mocks base method.
func (m *MockIEcr) CheckEcrExists(ctx context.Context, repositoryName *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEcrExists", ctx, repositoryName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEcrExists indicates an expected call of CheckEcrExists.
func (mr *MockIEcrMockRecorder) CheckEcrExists(ctx, repositoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEcrExists", reflect.TypeOf((*MockIEcr)(nil).CheckEcrExists), ctx, repositoryName)
}

// DeleteRepository mocks base method.
func (m *MockIEcr) DeleteRepository(ctx context.Context, repositoryName *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, repositoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockIEcrMockRecorder) DeleteRepository(ctx, repositoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockIEcr)(nil).DeleteRepository), ctx, repositoryName)
}
