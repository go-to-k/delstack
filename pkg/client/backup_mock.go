// Code generated by MockGen. DO NOT EDIT.
// Source: ./backup.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/backup/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIBackup is a mock of IBackup interface.
type MockIBackup struct {
	ctrl     *gomock.Controller
	recorder *MockIBackupMockRecorder
}

// MockIBackupMockRecorder is the mock recorder for MockIBackup.
type MockIBackupMockRecorder struct {
	mock *MockIBackup
}

// NewMockIBackup creates a new mock instance.
func NewMockIBackup(ctrl *gomock.Controller) *MockIBackup {
	mock := &MockIBackup{ctrl: ctrl}
	mock.recorder = &MockIBackupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBackup) EXPECT() *MockIBackupMockRecorder {
	return m.recorder
}

// CheckBackupVaultExists mocks base method.
func (m *MockIBackup) CheckBackupVaultExists(ctx context.Context, backupVaultName *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBackupVaultExists", ctx, backupVaultName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBackupVaultExists indicates an expected call of CheckBackupVaultExists.
func (mr *MockIBackupMockRecorder) CheckBackupVaultExists(ctx, backupVaultName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBackupVaultExists", reflect.TypeOf((*MockIBackup)(nil).CheckBackupVaultExists), ctx, backupVaultName)
}

// DeleteBackupVault mocks base method.
func (m *MockIBackup) DeleteBackupVault(ctx context.Context, backupVaultName *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupVault", ctx, backupVaultName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackupVault indicates an expected call of DeleteBackupVault.
func (mr *MockIBackupMockRecorder) DeleteBackupVault(ctx, backupVaultName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupVault", reflect.TypeOf((*MockIBackup)(nil).DeleteBackupVault), ctx, backupVaultName)
}

// DeleteRecoveryPoint mocks base method.
func (m *MockIBackup) DeleteRecoveryPoint(ctx context.Context, backupVaultName, recoveryPointArn *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryPoint", ctx, backupVaultName, recoveryPointArn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecoveryPoint indicates an expected call of DeleteRecoveryPoint.
func (mr *MockIBackupMockRecorder) DeleteRecoveryPoint(ctx, backupVaultName, recoveryPointArn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryPoint", reflect.TypeOf((*MockIBackup)(nil).DeleteRecoveryPoint), ctx, backupVaultName, recoveryPointArn)
}

// DeleteRecoveryPoints mocks base method.
func (m *MockIBackup) DeleteRecoveryPoints(ctx context.Context, backupVaultName *string, recoveryPoints []types.RecoveryPointByBackupVault) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryPoints", ctx, backupVaultName, recoveryPoints)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecoveryPoints indicates an expected call of DeleteRecoveryPoints.
func (mr *MockIBackupMockRecorder) DeleteRecoveryPoints(ctx, backupVaultName, recoveryPoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryPoints", reflect.TypeOf((*MockIBackup)(nil).DeleteRecoveryPoints), ctx, backupVaultName, recoveryPoints)
}

// ListRecoveryPointsByBackupVault mocks base method.
func (m *MockIBackup) ListRecoveryPointsByBackupVault(ctx context.Context, backupVaultName *string) ([]types.RecoveryPointByBackupVault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryPointsByBackupVault", ctx, backupVaultName)
	ret0, _ := ret[0].([]types.RecoveryPointByBackupVault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryPointsByBackupVault indicates an expected call of ListRecoveryPointsByBackupVault.
func (mr *MockIBackupMockRecorder) ListRecoveryPointsByBackupVault(ctx, backupVaultName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryPointsByBackupVault", reflect.TypeOf((*MockIBackup)(nil).ListRecoveryPointsByBackupVault), ctx, backupVaultName)
}
